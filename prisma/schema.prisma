generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Address {
  ssn      String @db.Char(8)
  commune  String @db.VarChar(30)
  district String @db.VarChar(30)
  province String @db.VarChar(30)
  People   People @relation(fields: [ssn], references: [SSN], onDelete: Cascade, map: "fk_address")

  @@id([ssn, commune, district, province])
}

model Email {
  ssn    String @db.Char(8)
  email  String @db.VarChar(50)
  People People @relation(fields: [ssn], references: [SSN], onDelete: Cascade, map: "fk_email")

  @@id([ssn, email])
}

model PhoneNumber {
  ssn         String @db.Char(8)
  phoneNumber String @db.Char(10)
  People      People @relation(fields: [ssn], references: [SSN], onDelete: Cascade, map: "fk_phoneNumber")

  @@id([ssn, phoneNumber])
}

model People {
  SSN          String        @id @db.Char(8)
  Full_Name    String        @db.VarChar(20)
  Last_Name    String        @db.VarChar(20)
  Birthday     DateTime      @db.Date
  Sex          String?       @db.Char(1)
  Health_State String?       @db.VarChar(100)
  Ethnic_Group String?       @db.VarChar(30)
  Address      Address[]
  Email        Email[]
  PhoneNumber  PhoneNumber[]
  employee     employee?
  student      student?
}

model student {
  Sssn               String              @id @db.Char(8)
  studentId          String              @db.Char(8)
  hasHealthInsurance Boolean
  studyStatus        String?             @db.VarChar(20)
  className          String?             @db.VarChar(20)
  faculty            String?             @db.VarChar(50)
  building_id        String?             @db.Char(5)
  room_id            String?             @db.Char(5)
  Dormitory_Card     Dormitory_Card[]
  relative           relative[]
  People             People              @relation(fields: [Sssn], references: [SSN], onDelete: Cascade, map: "fk_student_p")
  living_room        living_room?        @relation(fields: [building_id, room_id], references: [building_id, room_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_room")
  studentDiscipline  studentDiscipline[]

  @@index([building_id, room_id], map: "fk_student_room")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Dormitory_Card {
  Number        String        @id @db.Char(7)
  Start_Date    DateTime?     @db.Date
  End_Date      DateTime?     @db.Date
  ID_Card       String        @db.Char(8)
  Validity      Boolean?      @default(true)
  Identity_Card Identity_Card @relation(fields: [Number], references: [ID], onDelete: Cascade, map: "Dormitory_Card_ibfk_1")
  student       student       @relation(fields: [ID_Card], references: [Sssn], onDelete: Cascade, map: "Dormitory_Card_ibfk_2")

  @@index([ID_Card], map: "ID_Card")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Employee_Card {
  Number        String        @id @db.Char(7)
  Start_Date    DateTime?     @db.Date
  End_Date      DateTime?     @db.Date
  ID_Card       String        @db.Char(8)
  Employee_Type String?       @db.Char(10)
  Identity_Card Identity_Card @relation(fields: [Number], references: [ID], onDelete: Cascade, map: "Employee_Card_ibfk_1")
  employee      employee      @relation(fields: [ID_Card], references: [essn], onDelete: Cascade, map: "Employee_Card_ibfk_2")

  @@index([ID_Card], map: "ID_Card")
}

model Identity_Card {
  ID             String          @id @db.Char(7)
  Issued_Date    DateTime        @db.Date
  Dormitory_Card Dormitory_Card?
  Employee_Card  Employee_Card?
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model building {
  building_id         String               @id @db.Char(5)
  building_name       String               @db.Char(5)
  floors              Int
  rooms               Int
  has_air_conditioner Boolean
  sponsor             String?              @db.VarChar(100)
  construction_date   DateTime             @db.Date
  last_renovation     DateTime?            @db.Date
  building_equipment  building_equipment[]
  room                room[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model building_equipment {
  building_id     String          @db.Char(5)
  equipment_id    String          @db.Char(10)
  quantity        Int
  building        building        @relation(fields: [building_id], references: [building_id], onDelete: Cascade, map: "fk_building_equipment_building")
  large_equipment large_equipment @relation(fields: [equipment_id], references: [equipment_id], onDelete: Cascade, map: "fk_building_equipment_equipment")

  @@id([building_id, equipment_id])
  @@index([equipment_id], map: "fk_building_equipment_equipment")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model disciplinaryAction {
  actionId          String              @id @db.VarChar(20)
  actionType        String              @db.VarChar(50)
  reason            String              @db.Text
  decisionDate      DateTime            @db.Date
  effectiveFrom     DateTime            @db.Date
  effectiveTo       DateTime?           @db.Date
  severityLevel     String?             @db.VarChar(20)
  status            String?             @db.VarChar(20)
  disciplineStaff   disciplineStaff[]
  studentDiscipline studentDiscipline[]
}

model disciplineStaff {
  actionId           String             @db.VarChar(20)
  essn               String             @db.Char(8)
  disciplinaryAction disciplinaryAction @relation(fields: [actionId], references: [actionId], onDelete: Cascade, map: "fk_disciplineStaff_d")
  manager_employee   manager_employee   @relation(fields: [essn], references: [essn], onDelete: Cascade, map: "fk_disciplineStaff_m")

  @@id([actionId, essn])
  @@index([essn], map: "fk_disciplineStaff_m")
}

model employee {
  essn             String            @id @db.Char(8)
  salary           Decimal?          @db.Decimal(10, 0)
  empId            String?           @db.Char(7)
  Employee_Card    Employee_Card[]
  People           People            @relation(fields: [essn], references: [SSN], onDelete: Cascade, map: "fk_essn")
  manager_employee manager_employee?
  medical_employee medical_employee?
  other_employee   other_employee?
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model health_room {
  building_id      String                       @db.Char(5)
  room_id          String                       @db.Char(5)
  num_of_staff     Int                          @default(0)
  start_time       DateTime                     @db.Time(0)
  end_time         DateTime                     @db.Time(0)
  equipment_status health_room_equipment_status
  room             room                         @relation(fields: [building_id, room_id], references: [building_id, room_id], onDelete: Cascade, map: "fk_health_room")
  medical_employee medical_employee[]

  @@id([building_id, room_id])
}

model large_equipment {
  equipment_id       String                           @id @db.Char(10)
  equipment_name     String                           @db.VarChar(100)
  equipment_type     String                           @db.VarChar(50)
  equipment_status   large_equipment_equipment_status
  purchase_date      DateTime                         @db.Date
  purchase_location  String?                          @db.VarChar(255)
  building_equipment building_equipment[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model living_room {
  building_id             String    @db.Char(5)
  room_id                 String    @db.Char(5)
  max_num_of_students     Int
  current_num_of_students Int       @default(0)
  rental_price            Decimal   @db.Decimal(10, 2)
  occupancy_rate          Decimal   @default(0.00) @db.Decimal(5, 2)
  student                 student[]

  @@id([building_id, room_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model management_room {
  building_id      String             @db.Char(5)
  room_id          String             @db.Char(5)
  num_of_staff     Int                @default(0)
  start_time       DateTime           @db.Time(0)
  end_time         DateTime           @db.Time(0)
  room             room               @relation(fields: [building_id, room_id], references: [building_id, room_id], onDelete: Cascade, map: "fk_mgmt_room")
  manager_employee manager_employee[]

  @@id([building_id, room_id])
}

model managerDorm {
  user_name String @db.VarChar(50)
  password  String @db.VarChar(255)

  @@id([user_name, password])
}

model manager_degree {
  essn             String           @db.Char(8)
  degree           String           @db.VarChar(50)
  manager_employee manager_employee @relation(fields: [essn], references: [essn], onDelete: Cascade, map: "fk_mgr_deg")

  @@id([essn, degree])
}

model manager_employee {
  essn            String            @id @db.Char(8)
  room_id         String?           @db.Char(5)
  building_id     String?           @db.Char(5)
  experience      Decimal?          @db.Decimal(2, 0)
  disciplineStaff disciplineStaff[]
  manager_degree  manager_degree[]
  management_room management_room?  @relation(fields: [building_id, room_id], references: [building_id, room_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_manager_employee_room")
  employee        employee          @relation(fields: [essn], references: [essn], onDelete: Cascade, map: "fk_mgr_essn")

  @@index([building_id, room_id], map: "fk_manager_employee_room")
}

model medical_degree {
  essn             String           @db.Char(8)
  degree           String           @db.VarChar(50)
  medical_employee medical_employee @relation(fields: [essn], references: [essn], onDelete: Cascade, map: "fk_med_deg")

  @@id([essn, degree])
}

model medical_employee {
  essn           String           @id @db.Char(8)
  room_id        String?          @db.Char(5)
  building_id    String?          @db.Char(5)
  experience     Decimal?         @db.Decimal(2, 0)
  medical_degree medical_degree[]
  employee       employee         @relation(fields: [essn], references: [essn], onDelete: Cascade, map: "fk_med_essn")
  health_room    health_room?     @relation(fields: [building_id, room_id], references: [building_id, room_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_medical_employee_room")

  @@index([building_id, room_id], map: "fk_medical_employee_room")
}

model other_employee {
  essn                     String                     @id @db.Char(8)
  room_id                  String?                    @db.Char(5)
  building_id              String?                    @db.Char(5)
  typeWork                 String?                    @db.VarChar(20)
  employee                 employee                   @relation(fields: [essn], references: [essn], onDelete: Cascade, map: "fk_oth_essn")
  other_room               other_room?                @relation(fields: [building_id, room_id], references: [building_id, room_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_other_employee_room")
  other_employee_time_work other_employee_time_work[]

  @@index([building_id, room_id], map: "fk_other_employee_room")
}

model other_employee_time_work {
  essn           String                             @db.Char(8)
  date_work      other_employee_time_work_date_work
  time_start     DateTime                           @db.Time(0)
  time_end       DateTime                           @db.Time(0)
  other_employee other_employee                     @relation(fields: [essn], references: [essn], onDelete: NoAction, onUpdate: NoAction, map: "fk_other_time")

  @@id([essn, date_work, time_start, time_end])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model other_room {
  building_id    String           @db.Char(5)
  room_id        String           @db.Char(5)
  room_type      String           @db.VarChar(100)
  num_of_staff   Int              @default(0)
  start_time     DateTime         @db.Time(0)
  end_time       DateTime         @db.Time(0)
  other_employee other_employee[]
  room           room             @relation(fields: [building_id, room_id], references: [building_id, room_id], onDelete: Cascade, map: "fk_other_room")

  @@id([building_id, room_id])
}

model relative {
  Sssn         String   @db.Char(8)
  fname        String   @db.VarChar(20)
  lname        String   @db.VarChar(20)
  birthday     DateTime @db.Date
  relationship String   @db.VarChar(50)
  address      String   @db.VarChar(255)
  phoneNumber  String?  @db.Char(10)
  job          String?  @db.VarChar(50)
  student      student  @relation(fields: [Sssn], references: [Sssn], onDelete: Cascade, map: "fk_relative")

  @@id([Sssn, fname, lname])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model room {
  building_id     String           @db.Char(5)
  room_id         String           @db.Char(5)
  room_status     room_room_status
  room_area       Decimal          @db.Decimal(10, 2)
  health_room     health_room?
  management_room management_room?
  other_room      other_room?
  building        building         @relation(fields: [building_id], references: [building_id], onDelete: Cascade, map: "fk_room_building")

  @@id([building_id, room_id])
}

model studentDiscipline {
  actionId           String             @db.VarChar(20)
  Sssn               String             @db.Char(8)
  disciplinaryAction disciplinaryAction @relation(fields: [actionId], references: [actionId], onDelete: Cascade, map: "fk_studentDiscipline_d")
  student            student            @relation(fields: [Sssn], references: [Sssn], onDelete: Cascade, map: "fk_studentDiscipline_s")

  @@id([actionId, Sssn])
  @@index([Sssn], map: "fk_studentDiscipline_s")
}

enum other_employee_time_work_date_work {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
  other
}

enum room_room_status {
  Available
  Occupied
  Under_Maintenance @map("Under Maintenance")
}

enum large_equipment_equipment_status {
  Working
  Damaged
  Under_Repair @map("Under Repair")
}

enum health_room_equipment_status {
  Good
  Under_Repair  @map("Under Repair")
  Not_Available @map("Not Available")
}
